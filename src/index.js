// src/index.js
// Bot Principal - WhatsApp IPTV Agent
// Arquivo de inicializa√ß√£o principal que conecta todos os m√≥dulos

const WhatsAppHandler = require('./bot/whatsapp-handler');
const config = require('./config');
const { logger, logSystemStart, healthMonitor } = require('./utils/logger');

class IPTVAgent {
    constructor() {
        this.whatsappHandler = null;
        this.isRunning = false;
        this.startTime = new Date();
        
        // Configurar manipuladores de sinal
        this.setupSignalHandlers();
        
        logger.info('ü§ñ IPTV Agent inicializando...');
    }

    /**
     * Inicializa o bot completo
     */
    async start() {
        try {
            logSystemStart();
            
            console.log('\nü§ñ ===== WHATSAPP IPTV AGENT =====');
            console.log(`üìÖ Iniciado em: ${this.startTime.toLocaleString('pt-BR')}`);
            console.log(`üåê Ambiente: ${config.app.env}`);
            console.log(`üìä Vers√£o: ${config.app.version}`);
            console.log('=====================================\n');

            // 1. Inicializar WhatsApp Handler
            await this.initializeWhatsApp();
            
            // 2. Configurar monitoramento de sa√∫de
            this.setupHealthMonitoring();
            
            this.isRunning = true;
            
            logger.info('‚úÖ IPTV Agent iniciado com sucesso!');
            console.log('üéâ Bot IPTV funcionando! Aguardando conex√£o WhatsApp...\n');
            
            // Manter processo vivo
            this.keepAlive();
            
        } catch (error) {
            logger.error('‚ùå Erro cr√≠tico ao iniciar bot:', error);
            console.error('\n‚ùå Erro ao iniciar o bot:', error.message);
            process.exit(1);
        }
    }

    /**
     * Inicializa o manipulador do WhatsApp
     */
    async initializeWhatsApp() {
        try {
            logger.info('üì± Inicializando conex√£o WhatsApp...');
            
            this.whatsappHandler = new WhatsAppHandler();
            await this.whatsappHandler.initialize();
            
            logger.info('‚úÖ WhatsApp Handler configurado');
            
        } catch (error) {
            logger.error('‚ùå Erro ao inicializar WhatsApp:', error);
            throw new Error(`Falha na inicializa√ß√£o do WhatsApp: ${error.message}`);
        }
    }

    /**
     * Configura monitoramento de sa√∫de
     */
    setupHealthMonitoring() {
        logger.info('üè• Configurando monitoramento de sa√∫de...');

        // Verifica√ß√£o de sa√∫de a cada 5 minutos
        setInterval(() => {
            this.checkSystemHealth();
        }, 300000); // 5 minutos

        logger.info('‚úÖ Monitoramento de sa√∫de ativo');
    }

    /**
     * Verifica sa√∫de do sistema
     */
    checkSystemHealth() {
        try {
            const health = {
                timestamp: new Date(),
                isRunning: this.isRunning,
                uptime: Date.now() - this.startTime.getTime(),
                whatsappConnected: this.whatsappHandler?.isConnected() || false,
                memory: process.memoryUsage(),
                stats: healthMonitor.getHealthReport()
            };

            // Log de sa√∫de apenas se houver problemas
            if (!health.whatsappConnected || health.memory.heapUsed > 500 * 1024 * 1024) { // 500MB
                logger.warn('‚ö†Ô∏è Alerta de sa√∫de do sistema:', health);
            }

            return health;

        } catch (error) {
            logger.error('‚ùå Erro na verifica√ß√£o de sa√∫de:', error);
            return null;
        }
    }

    /**
     * Mant√©m o processo vivo
     */
    keepAlive() {
        // Evita que o processo termine
        process.stdin.resume();
        
        // Log peri√≥dico de status
        setInterval(() => {
            if (config.isDevelopment()) {
                const stats = healthMonitor.getHealthReport();
                console.log(`ü§ñ Status: ${stats.messagesReceived} msgs recebidas | ${stats.messagesSent} msgs enviadas | Uptime: ${stats.uptimeHours}h`);
            }
        }, 300000); // A cada 5 minutos
    }

    /**
     * Configura manipuladores de sinais do sistema
     */
    setupSignalHandlers() {
        const gracefulShutdown = async (signal) => {
            logger.info(`üõë Recebido sinal ${signal}. Iniciando shutdown graceful...`);
            console.log(`\nüõë Shutdown graceful iniciado (${signal})...`);
            
            try {
                // Parar de aceitar novas mensagens
                this.isRunning = false;
                
                // Aguardar processamento de mensagens pendentes
                await this.sleep(5000);
                
                // Finalizar conex√£o WhatsApp
                if (this.whatsappHandler) {
                    await this.whatsappHandler.destroy();
                }
                
                logger.info('‚úÖ Shutdown conclu√≠do com sucesso');
                console.log('‚úÖ Bot finalizado com seguran√ßa!\n');
                
                process.exit(0);
                
            } catch (error) {
                logger.error('‚ùå Erro durante shutdown:', error);
                console.error('‚ùå Erro ao finalizar:', error.message);
                process.exit(1);
            }
        };

        // Sinais de t√©rmino
        process.on('SIGINT', () => gracefulShutdown('SIGINT'));
        process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

        // Erros n√£o tratados
        process.on('uncaughtException', (error) => {
            logger.error('‚ùå Exce√ß√£o n√£o tratada:', error);
            console.error('‚ùå Erro cr√≠tico:', error.message);
            gracefulShutdown('uncaughtException');
        });

        process.on('unhandledRejection', (reason, promise) => {
            logger.error('‚ùå Promise rejeitada n√£o tratada:', { reason, promise });
            console.error('‚ùå Promise rejeitada:', reason);
            gracefulShutdown('unhandledRejection');
        });
    }

    /**
     * Utilit√°rio para aguardar
     */
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Fun√ß√£o principal
async function main() {
    try {
        // Verificar se o ambiente est√° configurado
        if (!config.waseller.apiKey) {
            console.error('\n‚ùå Erro: Chave da API Waseller n√£o configurada!');
            console.log('üìù Execute: node setup.js para configurar\n');
            process.exit(1);
        }

        // Criar e iniciar o bot
        const agent = new IPTVAgent();
        await agent.start();

    } catch (error) {
        console.error('\n‚ùå Erro fatal ao iniciar o bot:', error.message);
        console.error('\nüìã Verifique:');
        console.error('   1. Se executou: node setup.js');
        console.error('   2. Se o arquivo .env est√° configurado');
        console.error('   3. Se as depend√™ncias est√£o instaladas: npm install');
        console.error('   4. Se h√° erros nos logs: tail -f logs/app.log\n');
        process.exit(1);
    }
}

// Executar se for o arquivo principal
if (require.main === module) {
    main();
}

module.exports = IPTVAgent;